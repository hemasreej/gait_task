# -*- coding: utf-8 -*-
"""Imu2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gK0_LmQyB-Lm1oWINzXtSIX2vJQlqxaB
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import StandardScaler

train_data = pd.read_csv('/content/drive/MyDrive/train.csv')

X_train = train_data.iloc[:, :-1]  # Features
y_train = train_data['gaittype']   # Labels

test_data = pd.read_csv('/content/drive/MyDrive/test.csv')

X_test = test_data

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X_train_scaled, y_train)

y_pred = clf.predict(X_test_scaled)

from sklearn.svm import SVC
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression

svm_clf = SVC()
gb_clf = GradientBoostingClassifier()
knn_clf = KNeighborsClassifier()
lr_clf = LogisticRegression()

svm_clf.fit(X_train_scaled, y_train)
gb_clf.fit(X_train_scaled, y_train)
knn_clf.fit(X_train_scaled, y_train)
lr_clf.fit(X_train_scaled, y_train)

svm_pred = svm_clf.predict(X_test_scaled)
gb_pred = gb_clf.predict(X_test_scaled)
knn_pred = knn_clf.predict(X_test_scaled)
lr_pred = lr_clf.predict(X_test_scaled)

#print("Predicted Gait Types:", y_pred)

from sklearn.metrics import accuracy_score

from sklearn.model_selection import train_test_split

X_train, X_val, y_train, y_val = train_test_split(X_train_scaled, y_train, test_size=0.2, random_state=42)

svm_clf = SVC()
gb_clf = GradientBoostingClassifier()
knn_clf = KNeighborsClassifier()
lr_clf = LogisticRegression()

svm_clf.fit(X_train, y_train)
gb_clf.fit(X_train, y_train)
knn_clf.fit(X_train, y_train)
lr_clf.fit(X_train, y_train)

svm_pred_val = svm_clf.predict(X_val)
gb_pred_val = gb_clf.predict(X_val)
knn_pred_val = knn_clf.predict(X_val)
lr_pred_val = lr_clf.predict(X_val)

svm_accuracy_val = accuracy_score(y_val, svm_pred_val)
gb_accuracy_val = accuracy_score(y_val, gb_pred_val)
knn_accuracy_val = accuracy_score(y_val, knn_pred_val)
lr_accuracy_val = accuracy_score(y_val, lr_pred_val)

print("SVM Accuracy (Validation):", svm_accuracy_val)
print("Gradient Boosting Accuracy (Validation):", gb_accuracy_val)
print("KNN Accuracy (Validation):", knn_accuracy_val)
print("Logistic Regression Accuracy (Validation):", lr_accuracy_val)

accuracies_val = {'SVM': svm_accuracy_val, 'Gradient Boosting': gb_accuracy_val, 'KNN': knn_accuracy_val, 'Logistic Regression': lr_accuracy_val}
best_model_val = max(accuracies_val, key=accuracies_val.get)
print("Best Model (Validation):", best_model_val)
print("Accuracy of Best Model (Validation):", accuracies_val[best_model_val])

from sklearn.ensemble import GradientBoostingClassifier

gb_clf = GradientBoostingClassifier()

gb_clf.fit(X_train, y_train)

gb_pred_test = gb_clf.predict(X_test_scaled)

print("Predicted Gait Types (Gradient Boosting):", gb_pred_test) now give this code in wrong format